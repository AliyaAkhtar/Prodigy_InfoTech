# -*- coding: utf-8 -*-
"""Dogs VS Cats.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16MMhP5ia7erPABvHgWwON1jqjNmC6Gui
"""

# loading the dataset from drive
!pip install -Uqq fastbook
import fastbook
fastbook.setup_book()
from fastbook import *

! [ -e /content ] && pip install -Uqq fastai

from google.colab import drive
drive.mount('/content/drive')

from fastai.vision import *
path1 = '/content/drive/MyDrive/DogVSCat/Cat'
path2 = '/content/drive/MyDrive/DogVSCat/Dog'

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Function to extract features from images
def extract_features(image_path, size=(100, 100)):
    image = cv2.imread(image_path)
    image = cv2.resize(image, size)
    return image.flatten()

def load_dataset(folder):
    X = []
    y = []
    for label, category in enumerate(["Cat", "Dog"]):
        path = os.path.join(folder, category)
        print("Loading images from", path)
        for image_file in os.listdir(path):
            image_path = os.path.join(path, image_file)
            print("Reading image:", image_path)
            image = cv2.imread(image_path)
            if image is None:
                print("Failed to load image:", image_path)
                continue
            image = cv2.resize(image, (100, 100))
            X.append(image.flatten())
            y.append(label)
    return np.array(X), np.array(y)

# Load dataset from Google Drive
folder_path = "/content/drive/MyDrive/DogVSCat/PetImages"
X, y = load_dataset(folder_path)

# Split dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train SVM model
svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)

# Predictions
y_pred = svm_model.predict(X_test)

# Evaluate model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Function to preprocess the image
def preprocess_image(image_path, size=(100, 100)):
    image = cv2.imread(image_path)
    image = cv2.resize(image, size)
    return image.flatten()

# Load and preprocess the new image
image_path = "/content/drive/MyDrive/DogVSCat/dog.jfif"
preprocessed_image = preprocess_image(image_path)

# Predict the class label using the trained SVM model
predicted_label = svm_model.predict(preprocessed_image.reshape(1, -1))

# Map the predicted label to the corresponding class
class_mapping = {0: "Cat", 1: "Dog"}
predicted_class = class_mapping[predicted_label[0]]

print("Predicted Class:", predicted_class)