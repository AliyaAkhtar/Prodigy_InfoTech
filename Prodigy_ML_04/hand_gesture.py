# -*- coding: utf-8 -*-
"""Hand Gesture.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHboQPDrRCh2fGGXJvfYU6eZvMahS7W5
"""

# loading the dataset from drive
!pip install -Uqq fastbook
import fastbook
fastbook.setup_book()
from fastbook import *

! [ -e /content ] && pip install -Uqq fastai

from google.colab import drive
drive.mount('/content/drive')

from fastai.vision import *
path1 = '/content/drive/MyDrive/HandGestureRecognition/00'

pip install tensorflow keras

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Step 1: Load the Dataset
data_directory = "/content/drive/MyDrive/HandGestureRecognition/00"
gesture_names = os.listdir(data_directory)
num_gestures = len(gesture_names)
images = []
labels = []

print (gesture_names)
print (num_gestures)

for gesture_id, gesture_name in enumerate(gesture_names):
    gesture_path = os.path.join(data_directory, gesture_name)
    for image_name in os.listdir(gesture_path):
        image_path = os.path.join(gesture_path, image_name)
        image = cv2.imread(image_path)
        image = cv2.resize(image, (100, 100))  # Resize the image if needed
        images.append(image)
        labels.append(gesture_id)

# Step 2: Preprocess the Data
images = np.array(images) / 255.0  # Normalize pixel values
labels = to_categorical(labels, num_classes=num_gestures)  # One-hot encode labels

import matplotlib.pyplot as plt

# Display some sample images
plt.figure(figsize=(10, 10))
for i in range(9):
    plt.subplot(3, 3, i + 1)
    plt.imshow(images[i])
    plt.title(gesture_names[np.argmax(labels[i])])
    plt.axis('off')
plt.show()

# Step 3: Split the Dataset
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Step 4: Define the Model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=X_train[0].shape),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(num_gestures, activation='softmax')
])

# Step 5: Compile the Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Step 6: Train the Model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val))

# Step 7: Evaluate the Model
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print("Test Accuracy:", test_accuracy)