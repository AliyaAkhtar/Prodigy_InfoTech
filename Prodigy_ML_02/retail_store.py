# -*- coding: utf-8 -*-
"""Retail Store.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19OkOP7SiJOWqTWW_lkEnMdcD-tCH48Cf
"""

import pandas as pd
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# loading the dataset from drive
!pip install -Uqq fastbook
import fastbook
fastbook.setup_book()
from fastbook import *

! [ -e /content ] && pip install -Uqq fastai

from google.colab import drive
drive.mount('/content/drive')

from fastai.vision import *
path1 = '/content/drive/MyDrive/RetailStore/Mall_Customers.csv'

# loading the dataset to Pandas Dataframe
retail_df = pd.read_csv('/content/drive/MyDrive/RetailStore/Mall_Customers.csv')

retail_df.head()

retail_df.tail()

retail_df.info()

retail_df.describe()

retail_df.isnull().sum()

# Select relevant features
X = retail_df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Feature Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Choosing the Number of Clusters
# You can use the elbow method to find the optimal number of clusters
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plotting the elbow method
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

# From the elbow method, choose the optimal number of clusters (e.g., k=5)

# Model Training
kmeans = KMeans(n_clusters=5, init='k-means++', random_state=42)
kmeans.fit(X_scaled)

# Adding cluster labels to the dataset
retail_df['Cluster'] = kmeans.labels_

# Visualizing Clusters
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', data=retail_df, palette='viridis')
plt.title('Clusters of Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.show()

# Calculate cluster profiles
cluster_profiles = retail_df.groupby('Cluster').agg({
    'Age': 'mean',
    'Annual Income (k$)': 'mean',
    'Spending Score (1-100)': 'mean',
    'Gender': lambda x: x.value_counts().index[0]  # Most frequent gender in each cluster
}).reset_index()

print(cluster_profiles)

pip install plotly

import plotly.express as px

# Plot 3D scatter plot
fig = px.scatter_3d(retail_df, x='Annual Income (k$)', y='Spending Score (1-100)', z='Age', color='Cluster',
                    symbol='Gender', size_max=10)
fig.update_layout(title='3D Scatter Plot of Clusters',
                  scene=dict(xaxis_title='Annual Income (k$)',
                             yaxis_title='Spending Score (1-100)',
                             zaxis_title='Age'))
fig.show()